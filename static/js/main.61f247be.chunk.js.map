{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","url","FindMovie","addMovie","useState","newMovie","setNewMovie","query","setQuery","disabled","setDisabled","hasLoadingError","setHasLoadingError","hasBeenAdded","setHasBeenAdded","onSubmit","event","preventDefault","some","htmlFor","type","id","placeholder","name","value","onChange","target","onClick","fetch","then","response","json","movieFromServer","Title","Plot","Poster","imdbID","App","data","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f247be.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ title, description = '', imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'http://www.omdbapi.com';\nconst url = `${BASE_URL}/?apikey=106c9773`;\n\nexport const getMovie = title => fetch(`${url}&t=${title}`)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({\n  addMovie,\n  movies,\n}) => {\n  const [newMovie, setNewMovie] = useState(null);\n  const [query, setQuery] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [hasBeenAdded, setHasBeenAdded] = useState(false);\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n\n    if (value !== query) {\n      setHasLoadingError(false);\n      setHasBeenAdded(false);\n    }\n\n    setQuery(value);\n  };\n\n  const clickedButtonFind = () => {\n    getMovie(query)\n      .then((movieFromServer) => {\n        const movie = {\n          title: movieFromServer.Title,\n          description: movieFromServer.Plot,\n          imgUrl: movieFromServer.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbId}`,\n          imdbId: movieFromServer.imdbID,\n        };\n\n        if (!movie.imdbId) {\n          setHasLoadingError(true);\n        } else {\n          setNewMovie(movie);\n          setDisabled(false);\n        }\n      });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!movies.some(movie => movie.imdbId === newMovie.imdbId)) {\n      addMovie(newMovie);\n\n      setNewMovie(null);\n      setQuery('');\n      setDisabled(true);\n    } else {\n      setHasBeenAdded(true);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n              name=\"value\"\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with a such title\n            </p>\n          )}\n          {hasBeenAdded && (\n            <p className=\"help is-danger\">\n              This movie has already been added\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={clickedButtonFind}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n              disabled={disabled}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {newMovie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    imgUrl: PropTypes.string.isRequired,\n    imdbUrl: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (newMovie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}